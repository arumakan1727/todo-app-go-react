// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package server

import (
	"fmt"
	"net/http"

	. "github.com/arumakan1727/todo-app-go-react/app/server/schema"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /__/users)
	ListUsersForAdmin(ctx echo.Context) error

	// (POST /authtoken/new)
	CreateAuthToken(ctx echo.Context) error

	// (GET /ping)
	GetPing(ctx echo.Context) error

	// (GET /tasks)
	ListTasks(ctx echo.Context, params ListTasksParams) error

	// (POST /tasks)
	CreateTask(ctx echo.Context) error

	// (DELETE /tasks/{taskID})
	DeleteTask(ctx echo.Context, taskID TaskID) error

	// (GET /tasks/{taskID})
	GetTask(ctx echo.Context, taskID TaskID) error

	// (PATCH /tasks/{taskID})
	PatchTask(ctx echo.Context, taskID TaskID) error

	// (POST /users)
	CreateUser(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListUsersForAdmin converts echo context to params.
func (w *ServerInterfaceWrapper) ListUsersForAdmin(ctx echo.Context) error {
	var err error

	ctx.Set(AccessTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListUsersForAdmin(ctx)
	return err
}

// CreateAuthToken converts echo context to params.
func (w *ServerInterfaceWrapper) CreateAuthToken(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateAuthToken(ctx)
	return err
}

// GetPing converts echo context to params.
func (w *ServerInterfaceWrapper) GetPing(ctx echo.Context) error {
	var err error

	ctx.Set(AccessTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPing(ctx)
	return err
}

// ListTasks converts echo context to params.
func (w *ServerInterfaceWrapper) ListTasks(ctx echo.Context) error {
	var err error

	ctx.Set(AccessTokenScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListTasksParams
	// ------------- Optional query parameter "done" -------------

	err = runtime.BindQueryParameter("form", true, false, "done", ctx.QueryParams(), &params.Done)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter done: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListTasks(ctx, params)
	return err
}

// CreateTask converts echo context to params.
func (w *ServerInterfaceWrapper) CreateTask(ctx echo.Context) error {
	var err error

	ctx.Set(AccessTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateTask(ctx)
	return err
}

// DeleteTask converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTask(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "taskID" -------------
	var taskID TaskID

	err = runtime.BindStyledParameterWithLocation("simple", false, "taskID", runtime.ParamLocationPath, ctx.Param("taskID"), &taskID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter taskID: %s", err))
	}

	ctx.Set(AccessTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteTask(ctx, taskID)
	return err
}

// GetTask converts echo context to params.
func (w *ServerInterfaceWrapper) GetTask(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "taskID" -------------
	var taskID TaskID

	err = runtime.BindStyledParameterWithLocation("simple", false, "taskID", runtime.ParamLocationPath, ctx.Param("taskID"), &taskID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter taskID: %s", err))
	}

	ctx.Set(AccessTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTask(ctx, taskID)
	return err
}

// PatchTask converts echo context to params.
func (w *ServerInterfaceWrapper) PatchTask(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "taskID" -------------
	var taskID TaskID

	err = runtime.BindStyledParameterWithLocation("simple", false, "taskID", runtime.ParamLocationPath, ctx.Param("taskID"), &taskID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter taskID: %s", err))
	}

	ctx.Set(AccessTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchTask(ctx, taskID)
	return err
}

// CreateUser converts echo context to params.
func (w *ServerInterfaceWrapper) CreateUser(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateUser(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/__/users", wrapper.ListUsersForAdmin)
	router.POST(baseURL+"/authtoken/new", wrapper.CreateAuthToken)
	router.GET(baseURL+"/ping", wrapper.GetPing)
	router.GET(baseURL+"/tasks", wrapper.ListTasks)
	router.POST(baseURL+"/tasks", wrapper.CreateTask)
	router.DELETE(baseURL+"/tasks/:taskID", wrapper.DeleteTask)
	router.GET(baseURL+"/tasks/:taskID", wrapper.GetTask)
	router.PATCH(baseURL+"/tasks/:taskID", wrapper.PatchTask)
	router.POST(baseURL+"/users", wrapper.CreateUser)

}
