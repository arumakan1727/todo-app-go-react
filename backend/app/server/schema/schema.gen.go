// Package schema provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package schema

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
)

const (
	AccessTokenScopes = "accessToken.Scopes"
)

// Defines values for ListTasksParamsDone.
const (
	ListTasksParamsDoneAny   ListTasksParamsDone = "any"
	ListTasksParamsDoneFalse ListTasksParamsDone = "false"
	ListTasksParamsDoneTrue  ListTasksParamsDone = "true"
)

// Password defines model for Password.
type Password = string

// ReqCreateTask defines model for ReqCreateTask.
type ReqCreateTask struct {
	Title TaskTitle `json:"title"`
}

// ReqCreateUser defines model for ReqCreateUser.
type ReqCreateUser struct {
	DisplayName string              `json:"displayName"`
	Email       openapi_types.Email `json:"email"`
	Password    Password            `json:"password"`
}

// ReqNewAuthToken defines model for ReqNewAuthToken.
type ReqNewAuthToken struct {
	Email    openapi_types.Email `json:"email"`
	Password Password            `json:"password"`
}

// ReqUpdateTask defines model for ReqUpdateTask.
type ReqUpdateTask struct {
	Title TaskTitle `json:"title"`
}

// ReqUpdateTaskStatus defines model for ReqUpdateTaskStatus.
type ReqUpdateTaskStatus struct {
	Done bool `json:"done"`
}

// RespAuthToken defines model for RespAuthToken.
type RespAuthToken struct {
	AccessToken string `json:"accessToken"`
}

// RespTask defines model for RespTask.
type RespTask struct {
	CreatedAt time.Time `json:"createdAt"`
	Done      bool      `json:"done"`
	Id        int       `json:"id"`
	Title     string    `json:"title"`
}

// RespTaskList defines model for RespTaskList.
type RespTaskList struct {
	Items      []RespTask `json:"items"`
	TotalCount int        `json:"totalCount"`
}

// RespUser defines model for RespUser.
type RespUser struct {
	CreatedAt   time.Time           `json:"createdAt"`
	DisplayName string              `json:"displayName"`
	Email       openapi_types.Email `json:"email"`
	Id          int                 `json:"id"`
}

// RespUserList defines model for RespUserList.
type RespUserList struct {
	Items      []RespUser `json:"items"`
	TotalCount int        `json:"totalCount"`
}

// TaskTitle defines model for TaskTitle.
type TaskTitle = string

// PathTaskID defines model for PathTaskID.
type PathTaskID = int

// Resp200Task defines model for Resp200Task.
type Resp200Task = RespTask

// ListTasksParams defines parameters for ListTasks.
type ListTasksParams struct {
	// Done タスクの完了状態のフィルタリング指定
	Done *ListTasksParamsDone `form:"done,omitempty" json:"done,omitempty"`
}

// ListTasksParamsDone defines parameters for ListTasks.
type ListTasksParamsDone string

// NewAuthTokenJSONRequestBody defines body for NewAuthToken for application/json ContentType.
type NewAuthTokenJSONRequestBody = ReqNewAuthToken

// CreateTaskJSONRequestBody defines body for CreateTask for application/json ContentType.
type CreateTaskJSONRequestBody = ReqCreateTask

// UpdateTaskJSONRequestBody defines body for UpdateTask for application/json ContentType.
type UpdateTaskJSONRequestBody = ReqUpdateTask

// UpdateTaskStatusJSONRequestBody defines body for UpdateTaskStatus for application/json ContentType.
type UpdateTaskStatusJSONRequestBody = ReqUpdateTaskStatus

// CreateUserJSONRequestBody defines body for CreateUser for application/json ContentType.
type CreateUserJSONRequestBody = ReqCreateUser

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
