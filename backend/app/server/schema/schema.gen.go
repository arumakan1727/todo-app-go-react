// Package schema provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package schema

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
)

const (
	AccessTokenScopes = "accessToken.Scopes"
)

// Defines values for ListTasksParamsDone.
const (
	ListTasksParamsDoneAny   ListTasksParamsDone = "any"
	ListTasksParamsDoneFalse ListTasksParamsDone = "false"
	ListTasksParamsDoneTrue  ListTasksParamsDone = "true"
)

// AuthToken defines model for AuthToken.
type AuthToken struct {
	AccessToken string `json:"accessToken"`
}

// Password defines model for Password.
type Password = string

// ReqCreateTask defines model for ReqCreateTask.
type ReqCreateTask struct {
	Title TaskTitle `json:"title"`
}

// ReqCreateUser defines model for ReqCreateUser.
type ReqCreateUser struct {
	DisplayName string              `json:"displayName"`
	Email       openapi_types.Email `json:"email"`
	Password    Password            `json:"password"`
}

// ReqNewAuthToken defines model for ReqNewAuthToken.
type ReqNewAuthToken struct {
	Email    openapi_types.Email `json:"email"`
	Password Password            `json:"password"`
}

// ReqUpdateTask defines model for ReqUpdateTask.
type ReqUpdateTask struct {
	Title TaskTitle `json:"title"`
}

// ReqUpdateTaskStatus defines model for ReqUpdateTaskStatus.
type ReqUpdateTaskStatus struct {
	Done bool `json:"done"`
}

// RespTask defines model for RespTask.
type RespTask struct {
	CreatedAt time.Time `json:"createdAt"`
	Done      bool      `json:"done"`
	Id        int       `json:"id"`
	Title     string    `json:"title"`
}

// RespTaskList defines model for RespTaskList.
type RespTaskList struct {
	Items      []RespTask `json:"items"`
	TotalCount int        `json:"totalCount"`
}

// TaskTitle defines model for TaskTitle.
type TaskTitle = string

// User defines model for User.
type User struct {
	CreatedAt   time.Time           `json:"createdAt"`
	DisplayName string              `json:"displayName"`
	Email       openapi_types.Email `json:"email"`
	Id          int                 `json:"id"`
}

// UserList defines model for UserList.
type UserList struct {
	Items      []User `json:"items"`
	TotalCount int    `json:"totalCount"`
}

// PathTaskID defines model for PathTaskID.
type PathTaskID = int

// Resp200Task defines model for Resp200Task.
type Resp200Task = RespTask

// ListTasksParams defines parameters for ListTasks.
type ListTasksParams struct {
	// Done タスクの完了状態のフィルタリング指定
	Done *ListTasksParamsDone `form:"done,omitempty" json:"done,omitempty"`
}

// ListTasksParamsDone defines parameters for ListTasks.
type ListTasksParamsDone string

// NewAuthTokenJSONRequestBody defines body for NewAuthToken for application/json ContentType.
type NewAuthTokenJSONRequestBody = ReqNewAuthToken

// CreateTaskJSONRequestBody defines body for CreateTask for application/json ContentType.
type CreateTaskJSONRequestBody = ReqCreateTask

// UpdateTaskJSONRequestBody defines body for UpdateTask for application/json ContentType.
type UpdateTaskJSONRequestBody = ReqUpdateTask

// UpdateTaskStatusJSONRequestBody defines body for UpdateTaskStatus for application/json ContentType.
type UpdateTaskStatusJSONRequestBody = ReqUpdateTaskStatus

// CreateUserJSONRequestBody defines body for CreateUser for application/json ContentType.
type CreateUserJSONRequestBody = ReqCreateUser

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
