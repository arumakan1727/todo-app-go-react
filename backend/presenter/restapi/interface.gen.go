// Package restapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package restapi

import (
	"context"
	"fmt"
	"net/http"

	"github.com/arumakan1727/todo-app-go-react/domain"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /__/users)
	ListUsersForAdmin(c echo.Context, clientUID UserID) error

	// (POST /authtoken/new)
	CreateAuthToken(c echo.Context) error

	// (GET /ping)
	GetPing(c echo.Context) error

	// (GET /tasks)
	ListTasks(c echo.Context, clientUID UserID, params ListTasksParams) error

	// (POST /tasks)
	CreateTask(c echo.Context, clientUID UserID) error

	// (DELETE /tasks/{taskID})
	DeleteTask(c echo.Context, clientUID UserID, taskID TaskID) error

	// (GET /tasks/{taskID})
	GetTask(c echo.Context, clientUID UserID, taskID TaskID) error

	// (PATCH /tasks/{taskID})
	PatchTask(c echo.Context, clientUID UserID, taskID TaskID) error

	// (POST /users)
	CreateUser(c echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler              ServerInterface
	GetClientAuthFromCtx func(context.Context) (domain.AuthMaterial, error)
}

// ListUsersForAdmin converts echo context to params.
func (w *ServerInterfaceWrapper) ListUsersForAdmin(ctx echo.Context) error {
	var err error

	var am domain.AuthMaterial
	if am, err = w.GetClientAuthFromCtx(ctx.Request().Context()); err != nil {
		return echo.NewHTTPError(http.StatusUnauthorized, "Missing or invalid apiAuthToken.")
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListUsersForAdmin(ctx, am.UID)
	return err
}

// CreateAuthToken converts echo context to params.
func (w *ServerInterfaceWrapper) CreateAuthToken(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateAuthToken(ctx)
	return err
}

// GetPing converts echo context to params.
func (w *ServerInterfaceWrapper) GetPing(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPing(ctx)
	return err
}

// ListTasks converts echo context to params.
func (w *ServerInterfaceWrapper) ListTasks(ctx echo.Context) error {
	var err error

	var am domain.AuthMaterial
	if am, err = w.GetClientAuthFromCtx(ctx.Request().Context()); err != nil {
		return echo.NewHTTPError(http.StatusUnauthorized, "Missing or invalid apiAuthToken.")
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ListTasksParams
	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", ctx.QueryParams(), &params.Status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListTasks(ctx, am.UID, params)
	return err
}

// CreateTask converts echo context to params.
func (w *ServerInterfaceWrapper) CreateTask(ctx echo.Context) error {
	var err error

	var am domain.AuthMaterial
	if am, err = w.GetClientAuthFromCtx(ctx.Request().Context()); err != nil {
		return echo.NewHTTPError(http.StatusUnauthorized, "Missing or invalid apiAuthToken.")
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateTask(ctx, am.UID)
	return err
}

// DeleteTask converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTask(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "taskID" -------------
	var taskID TaskID

	err = runtime.BindStyledParameterWithLocation("simple", false, "taskID", runtime.ParamLocationPath, ctx.Param("taskID"), &taskID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter taskID: %s", err))
	}

	var am domain.AuthMaterial
	if am, err = w.GetClientAuthFromCtx(ctx.Request().Context()); err != nil {
		return echo.NewHTTPError(http.StatusUnauthorized, "Missing or invalid apiAuthToken.")
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteTask(ctx, am.UID, taskID)
	return err
}

// GetTask converts echo context to params.
func (w *ServerInterfaceWrapper) GetTask(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "taskID" -------------
	var taskID TaskID

	err = runtime.BindStyledParameterWithLocation("simple", false, "taskID", runtime.ParamLocationPath, ctx.Param("taskID"), &taskID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter taskID: %s", err))
	}

	var am domain.AuthMaterial
	if am, err = w.GetClientAuthFromCtx(ctx.Request().Context()); err != nil {
		return echo.NewHTTPError(http.StatusUnauthorized, "Missing or invalid apiAuthToken.")
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTask(ctx, am.UID, taskID)
	return err
}

// PatchTask converts echo context to params.
func (w *ServerInterfaceWrapper) PatchTask(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "taskID" -------------
	var taskID TaskID

	err = runtime.BindStyledParameterWithLocation("simple", false, "taskID", runtime.ParamLocationPath, ctx.Param("taskID"), &taskID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter taskID: %s", err))
	}

	var am domain.AuthMaterial
	if am, err = w.GetClientAuthFromCtx(ctx.Request().Context()); err != nil {
		return echo.NewHTTPError(http.StatusUnauthorized, "Missing or invalid apiAuthToken.")
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchTask(ctx, am.UID, taskID)
	return err
}

// CreateUser converts echo context to params.
func (w *ServerInterfaceWrapper) CreateUser(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateUser(ctx)
	return err
}

// echo-register.tmpl (empty)
