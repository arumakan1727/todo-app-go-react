# available config options: https://github.com/deepmap/oapi-codegen/blob/master/pkg/codegen/configuration.go
package: rest
output: interface.gen.go
generate:
  echo-server: true
compatibility:
  always-prefix-enum-values: true
additional-imports: []
output-options:
  skip-prune: true
  user-templates:
    # see: https://github.com/deepmap/oapi-codegen/tree/master/pkg/codegen/templates
    echo/echo-register.tmpl: "// echo-register.tmpl (empty)"

    echo/echo-interface.tmpl: |
      // ServerInterface represents all server handlers.
      type ServerInterface interface {
      {{range .}}{{.SummaryAsComment }}
      // ({{.Method}} {{.Path}})
      {{.OperationId}}(c echo.Context{{if ne 0 (len .SecurityDefinitions)}}, clientUID UserID{{end}}{{genParamArgs .PathParams}}{{if .RequiresParamObject}}, params {{.OperationId}}Params{{end}}) error
      {{end}}
      }

    echo/echo-wrappers.tmpl: |
      // ServerInterfaceWrapper converts echo contexts to parameters.
      type ServerInterfaceWrapper struct {
          Handler             ServerInterface
          GetClientUIDFromCtx func (context.Context) (UserID, error)
      }

      {{range .}}{{$opid := .OperationId}}// {{$opid}} converts echo context to params.
      func (w *ServerInterfaceWrapper) {{.OperationId}} (ctx echo.Context) error {
          var err error
      {{range .PathParams}}// ------------- Path parameter "{{.ParamName}}" -------------
          var {{$varName := .GoVariableName}}{{$varName}} {{.TypeDef}}
      {{if .IsPassThrough}}
          {{$varName}} = ctx.Param("{{.ParamName}}")
      {{end}}
      {{if .IsJson}}
          err = json.Unmarshal([]byte(ctx.Param("{{.ParamName}}")), &{{$varName}})
          if err != nil {
              return echo.NewHTTPError(http.StatusBadRequest, "Error unmarshalling parameter '{{.ParamName}}' as JSON")
          }
      {{end}}
      {{if .IsStyled}}
          err = runtime.BindStyledParameterWithLocation("{{.Style}}",{{.Explode}}, "{{.ParamName}}", runtime.ParamLocationPath, ctx.Param("{{.ParamName}}"), &{{$varName}})
          if err != nil {
              return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter {{.ParamName}}: %s", err))
          }
      {{end}}
      {{end}}

      {{if ne 0 (len .SecurityDefinitions)}}
          var clientUID UserID
          if clientUID, err = w.GetClientUIDFromCtx(ctx.Request().Context()); err != nil {
              return err
          }
      {{end}}

      {{if .RequiresParamObject}}
          // Parameter object where we will unmarshal all parameters from the context
          var params {{.OperationId}}Params
      {{range $paramIdx, $param := .QueryParams}}
          {{- if (or (or .Required .IsPassThrough) (or .IsJson .IsStyled)) -}}
            // ------------- {{if .Required}}Required{{else}}Optional{{end}} query parameter "{{.ParamName}}" -------------
          {{ end }}
          {{if .IsStyled}}
          err = runtime.BindQueryParameter("{{.Style}}", {{.Explode}}, {{.Required}}, "{{.ParamName}}", ctx.QueryParams(), &params.{{.GoName}})
          if err != nil {
              return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter {{.ParamName}}: %s", err))
          }
          {{else}}
          if paramValue := ctx.QueryParam("{{.ParamName}}"); paramValue != "" {
          {{if .IsPassThrough}}
          params.{{.GoName}} = {{if not .Required}}&{{end}}paramValue
          {{end}}
          {{if .IsJson}}
          var value {{.TypeDef}}
          err = json.Unmarshal([]byte(paramValue), &value)
          if err != nil {
              return echo.NewHTTPError(http.StatusBadRequest, "Error unmarshalling parameter '{{.ParamName}}' as JSON")
          }
          params.{{.GoName}} = {{if not .Required}}&{{end}}value
          {{end}}
          }{{if .Required}} else {
              return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Query argument {{.ParamName}} is required, but not found"))
          }{{end}}
          {{end}}
      {{end}}

      {{if .HeaderParams}}
          headers := ctx.Request().Header
      {{range .HeaderParams}}// ------------- {{if .Required}}Required{{else}}Optional{{end}} header parameter "{{.ParamName}}" -------------
          if valueList, found := headers[http.CanonicalHeaderKey("{{.ParamName}}")]; found {
              var {{.GoName}} {{.TypeDef}}
              n := len(valueList)
              if n != 1 {
                  return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for {{.ParamName}}, got %d", n))
              }
      {{if .IsPassThrough}}
              params.{{.GoName}} = {{if not .Required}}&{{end}}valueList[0]
      {{end}}
      {{if .IsJson}}
              err = json.Unmarshal([]byte(valueList[0]), &{{.GoName}})
              if err != nil {
                  return echo.NewHTTPError(http.StatusBadRequest, "Error unmarshalling parameter '{{.ParamName}}' as JSON")
              }
      {{end}}
      {{if .IsStyled}}
              err = runtime.BindStyledParameterWithLocation("{{.Style}}",{{.Explode}}, "{{.ParamName}}", runtime.ParamLocationHeader, valueList[0], &{{.GoName}})
              if err != nil {
                  return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter {{.ParamName}}: %s", err))
              }
      {{end}}
              params.{{.GoName}} = {{if not .Required}}&{{end}}{{.GoName}}
              } {{if .Required}}else {
                  return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter {{.ParamName}} is required, but not found"))
              }{{end}}
      {{end}}
      {{end}}

      {{range .CookieParams}}
          if cookie, err := ctx.Cookie("{{.ParamName}}"); err == nil {
          {{if .IsPassThrough}}
          params.{{.GoName}} = {{if not .Required}}&{{end}}cookie.Value
          {{end}}
          {{if .IsJson}}
          var value {{.TypeDef}}
          var decoded string
          decoded, err := url.QueryUnescape(cookie.Value)
          if err != nil {
              return echo.NewHTTPError(http.StatusBadRequest, "Error unescaping cookie parameter '{{.ParamName}}'")
          }
          err = json.Unmarshal([]byte(decoded), &value)
          if err != nil {
              return echo.NewHTTPError(http.StatusBadRequest, "Error unmarshalling parameter '{{.ParamName}}' as JSON")
          }
          params.{{.GoName}} = {{if not .Required}}&{{end}}value
          {{end}}
          {{if .IsStyled}}
          var value {{.TypeDef}}
          err = runtime.BindStyledParameterWithLocation("simple",{{.Explode}}, "{{.ParamName}}", runtime.ParamLocationCookie, cookie.Value, &value)
          if err != nil {
              return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter {{.ParamName}}: %s", err))
          }
          params.{{.GoName}} = {{if not .Required}}&{{end}}value
          {{end}}
          }{{if .Required}} else {
              return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Query argument {{.ParamName}} is required, but not found"))
          }{{end}}

      {{end}}{{/* .CookieParams */}}

      {{end}}{{/* .RequiresParamObject */}}
          // Invoke the callback with all the unmarshalled arguments
          err = w.Handler.{{.OperationId}}(ctx{{if ne 0 (len .SecurityDefinitions)}}, clientUID{{end}}{{genParamNames .PathParams}}{{if .RequiresParamObject}}, params{{end}})
          return err
      }
      {{end}}

